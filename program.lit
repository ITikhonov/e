		Data

=data
-struct display {
-	char *s;
-	char *e;
-	char *from;
-	char *to;
-};

-struct display source = {0,0,0,0};
-struct display preview = {0,0,0,0};

-char input[1024];
-char *pinput=input;
-char afterinput=0;


		Save file

=includes
-#include <limits.h>

=savefile
- void savefile(void) {
-	char tmp[]="./.e.XXXXXX";
-	int f=mkstemp(tmp);
-
-	int i;
-	int size=preview.e-preview.s;
-	for(i=0;i<size;) {
-		int n=size-i;
-		if(n>10240) n=10240;
-		int r=write(f,preview.s+i,n);
-		if(r<0) die(); // FIXME: not really should we die
-		i+=r;
-	}
-	close(f);
-	rename(tmp,filename);
-}


		Insertion

=insert
-void insertat(char *at, char *what, int len) {
-	int offset=at-preview.s;
-	int size=preview.e-preview.s;

-	preview.s=realloc(preview.s,size+len);
-	preview.from=preview.s+offset;
-	
-	memmove(preview.from+len,preview.from,size-offset);
-	memmove(preview.from,what,len);

-	preview.e=preview.s+size+len;
-	preview.to=preview.from+len;
-}

-void insert(void) {
-	insertat(preview.from,input+1,(pinput-input)-1);
-	afterinput='.';
-}

-void append(void) {
-	insertat(preview.to,input+1,(pinput-input)-1);
-	afterinput='.';
-}

-void nlappend(void) {
-	insertat(preview.to++,"\n",1);
-	append();
-	afterinput='.';
-}

		Erase

=erase
-void erase(void) {
-	memmove(preview.from,preview.to,preview.e-preview.to);
-	preview.to=preview.from;
-}

-void replace(void) {
-	erase();
-	append();
-	afterinput='.';
-}



		Load file

=loadfile
-#define READSIZE (10240)

-char *filename=0;

-void loadfile(void) {
-	int f=open(filename,O_CREAT|O_RDONLY,0666);
-	struct stat st;
-	fstat(f,&st);

-	int rest=st.st_size;

-	source.s=realloc(source.s,rest+1+sizeof(void *));
-	char *p=source.s;
-	while(rest>0) {
-		rest-=READSIZE;
-		int toread=rest>0?READSIZE:(READSIZE+rest);
-		int r=read(f,p,toread);
-		if(r!=toread) die();
-		p+=toread;
-	}
-	source.e=p;
-	close(f);
-}

		Display

=display
-#define CSI "\x1b["

-void clear() { write(STDOUT_FILENO,CSI "H" CSI "2J",7); }

-void display(void) {
-	char *p=preview.s;

-	if(preview.from) {
		Scroll back from found so line will be at the 10th line of screen

-		p=preview.from;
-		int n=10;
-		for(;p>preview.s;p--) {
-			if(*p=='\n') {
-				n--;
-				if(n==0) { p++; break; }
-			}
-		}
-	}

-	clear();
-	int y;
-	int tab=0;

-	int highlight=0;

-	for(y=0;y<win.ws_row-5;y++) {
-		int x=0;
-		for(;;) {
-			int inside=(p>=preview.from && p<preview.to);

-			char c;
-			if(tab) {
-				c=' ';
-				tab--;
-			} else {
-				if(!(p<preview.e)) goto exit;
-				c=*p++;
-			}

-			if(c=='\t') { tab=8; continue; }
-			if(c=='\n') break;
-			if(x<win.ws_col-5) {

				Highlight search mark.

-				if(preview.from) {
-					if(highlight) {
-						if(!inside) { highlight=0; write(STDOUT_FILENO,CSI "0m",4); }
-					} else {
-						if(inside) { highlight=1; write(STDOUT_FILENO,CSI "0m" CSI "01;31m",12); }
-					}
-				}

-				write(STDOUT_FILENO,&c,1);

-				x++;
-			} else if(x==win.ws_col-5) {
-				write(STDOUT_FILENO,CSI "0m" CSI "01;32m..." CSI "0m",19);
-				x++;
-			}
-		}
-		write(STDOUT_FILENO,"\r\n",2);
-	}

	Display what is typed

-	exit:
-	write(STDOUT_FILENO,CSI "0m",4);
-	write(STDOUT_FILENO,"\r\n",2);
-	if(pinput>input) {
-		write(STDOUT_FILENO,": ",3);
-		write(STDOUT_FILENO,input,pinput-input);
-	}
-	
-}

		Preview

	While typing a command we bake preview by making a copy of
	content and applying command to it.

=decl
-void copydisplay(struct display *to,struct display *from);
-void search(void);
-void tailsearch(void);
-void bakepreview(void);

=bakepreview
-void copydisplay(struct display *to,struct display *from) {
-	to->s=realloc(to->s,from->e-from->s);
-	memmove(to->s,from->s,from->e-from->s);
-	to->e=to->s+(from->e-from->s);
-	to->from=from->from?to->s+(from->from-from->s):0;
-	to->to=from->to?to->s+(from->to-from->s):0;
-}

-void bakepreview(void) {
-	copydisplay(&preview,&source);

	Apply commands

-	if(pinput==input) return;
-	afterinput=0;
-	switch(input[0]) {
-	case '<': insert(); break;
-	case ',': append(); break;
-	case '.': nlappend(); break;
-	case '=': replace(); break;
-	case '-': tailsearch(); break;
-	default: search();
-	}
-}


-void search(void) {
-	char *start=preview.from?preview.from:preview.s;
-	char *p=start+1;
-	for(;;p++) {
-		if(p>preview.e-(pinput-input)) {
-			if(start>=p) break;
-			p=preview.s;
-		}
-		if(p==start) break;

-		if(memcmp(p,input,pinput-input)==0) {
-			preview.from=p;
-			preview.to=p+(pinput-input);
-			break;
-		}
-	}
-}

-void tailsearch(void) {
-	char *start=preview.to?preview.to:preview.s;
-	char *p=start+1;
-	for(;;p++) {
-		if(p>preview.e-((pinput-input)-1)) {
-			break;
-		}

-		if(memcmp(p,input+1,(pinput-input)-1)==0) {
-			preview.to=p+((pinput-input)-1);
-			break;
-		}
-	}
-}


		Keyboard input

=input
-void key(char c) {
-	if(c=='\x03') die();
- 	if(c=='\x13') { savefile(); return; }

-	if(c=='\x7f') { if(pinput>input) pinput--; }
-	else if(c=='\r') { pinput=input; copydisplay(&source,&preview); if(afterinput) *pinput++=afterinput; }
-	else if(c=='\x1b') { pinput=input; }
-	else { *pinput++=c; }
-}

		Main loop

=>e.c
>includes

>data
>decl


>termios
>loadfile
>savefile
>insert
>erase
>input
>bakepreview
>display

-int main(int argc, char *argv[]) {
-	if(argc!=2) {
-		resetterm();
-		printf("usage: %s filename\n",argv[0]);
-		return 1;
-	}
-	filename=argv[1];
-	loadfile();
-	initterm();
-	for(;;) {
-		bakepreview();
-		display();

-		char c;
-		if(read(STDIN_FILENO,&c,1)==-1) die();
-		key(c);
-	}
-}



=includes
-#include <unistd.h>
-#include <fcntl.h>
-#include <termios.h>
-#include <poll.h>
-#include <sys/mman.h>
-#include <sys/stat.h>
-#include <stdint.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <string.h>
-#include <sys/ioctl.h>
-#include <errno.h>

-#define __USE_GNU

-#include <regex.h>


=termios
-struct termios oldkey;
-struct winsize win;
-
-void initterm() {
-	struct termios newkey;
-	tcgetattr(STDIN_FILENO,&oldkey);
-	newkey.c_cflag = B9600 | CRTSCTS | CS8 | CLOCAL | CREAD;
-	newkey.c_iflag = IGNPAR;
-	newkey.c_oflag = 0;
-	newkey.c_lflag = 0;
-	newkey.c_cc[VMIN]=1;
-	newkey.c_cc[VTIME]=0;
-	tcflush(STDIN_FILENO, TCIFLUSH);
-	tcsetattr(STDIN_FILENO,TCSANOW,&newkey);
-	ioctl(1,TIOCGWINSZ,&win);
-}
-
-void resetterm() {
-	tcsetattr(STDIN_FILENO,TCSANOW,&oldkey);
-}

-void die(void) {
-	resetterm();
-	abort();
-}

=>input.c
>includes
>termios
-int main(int argc, char *argv[]) {
-	int q=0;
-	initterm();
-	for(;;) {
-		char c;
-		if(read(STDIN_FILENO,&c,1)==-1) die();
-		printf("char '%c' %02x\r\n",c,c);
-		if(c=='\x03') { q++; } else { q=0; }
-		if(q==3) die();
-	}
-}

