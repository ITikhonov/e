
		Load file

=loadfile
-char *text=0;
-char *texte=0;
-#define READSIZE (10240)

-void loadfile(char *name) {
-	int f=open(name,O_CREAT|O_RDWR,0644);
-	struct stat st;
-	fstat(f,&st);

-	int rest=st.st_size;

-	text=realloc(text,rest);
-	char *p=text;
-	while(rest>0) {
-		rest-=READSIZE;
-		int toread=rest>0?READSIZE:(READSIZE+rest);
-		int r=read(f,p,toread);
-		if(r!=toread) die();
-		p+=toread;
-	}
-	texte=p;
-}

		Display

=display
-#define CSI "\x1b["

-void clear() { write(STDOUT_FILENO,CSI "H" CSI "2J",7); }

-void display(void) {
-	char *p=text;
-	clear();
-	int y;
-	int tab=0;

-	int highlight=0;
-	unsigned int insert_idx=(pinput>input && input[0]=='\r')?1:-1;

-	for(y=0;y<win.ws_row-5;y++) {
-		int x=0;
-		for(;;) {
-			int inside=(p>=(pfound?pfound:found) && p<founde);

-			char c;
-			if(tab) {
-				c=' ';
-				tab--;
-			} else {
-				if(!(p<texte)) return;

-				if(p==found && insert_idx < pinput-input) {
-					c=input[insert_idx++];
-					if(c=='\r') c='\n';
-				} else {
-					c=*p++;
-				}
-			}

-			if(c=='\t') { tab=8; continue; }
-			if(c=='\n') break;
-			if(x<win.ws_col-5) {

				Highlight search mark.

-				if(found) {
-					if(highlight) {
-						if(!inside) { highlight=0; write(STDOUT_FILENO,CSI "0m",4); }
-					} else {
-						if(inside) { highlight=1; write(STDOUT_FILENO,CSI "0m" CSI "01;31m",12); }
-					}
-				}

-				write(STDOUT_FILENO,&c,1);

-				x++;
-			} else if(x==win.ws_col-5) {
-				write(STDOUT_FILENO,CSI "0m" CSI "01;32m..." CSI "0m",19);
-				x++;
-			}
-		}
-		write(STDOUT_FILENO,"\r\n",2);
-	}

	Display what is typed

-	write(STDOUT_FILENO,CSI "0m",4);
-	write(STDOUT_FILENO,"\r\n",2);
-	if(pinput>input) {
-		if(input[0]=='\r') {
-			write(STDOUT_FILENO,"e: ",3);
-			write(STDOUT_FILENO,input+1,(pinput-input)-1);
-		} else {
-			write(STDOUT_FILENO,"s: ",3);
-			write(STDOUT_FILENO,input,pinput-input);
-		}
-	}
-	
-}

		Search

=decl
-char *pfound=0;
-char *found=0;
-char *founde=0;

-void search(void);

=search

-void search(void) {

	Loop throught each space-separated word.

-	char *s;
-	char *p;

-	if(*input==' ') {
-		s=input+1;
-		p=founde;
-	} else {
-		s=input;
-		p=text;
-		pfound=0;
-	}

-	char *cm0=s;
-	char *cm=s;

-	char *fm=0;
-	int tail=0;

-	for(;p<texte;p++) {
-		if(*p=='\n') {
-			fm=0;
-			cm0=cm=s;
-		}
-		if(*p==*cm) {
-			cm++;

-			if(cm==pinput) {
-				found=fm?fm:(p-(cm-cm0)+1);
-				founde=p+1;
-				return;
-			}

			We do not need to match spaces, they
			separate tokens.

-			if(*cm==' ') { if(!fm) fm=p-(cm-cm0-1); cm++; cm0=cm; }
-			if(*cm==' ') { cm++; s=cm0=cm; if(!tail) pfound=0; fm=0; }
-			if(*cm=='\t') { pfound=fm?fm:(p-(cm-cm0-1)); cm++; s=cm0=cm; tail=1; fm=0; }
-		} else {
-			cm=cm0;
-		}

-	}

-}

		Keyboard input

=input
-char input[1024];
-char *pinput=input;

-void key(char c) {
-	if(c=='\x03') die();
-	if(c=='\x7f') { pinput--; }
-	else if(pinput>input && c=='\r' && input[0]!='\r') { pinput=input; }
-	else if(c=='\x1b') { pinput=input; }
-	else { *pinput++=c; }
-	search();
-}

		Main loop

=>e.c
>includes

>decl

>termios
>loadfile
>input
>search
>display

-int main(int argc, char *argv[]) {
-	if(argc!=2) {
-		resetterm();
-		printf("usage: %s filename\n",argv[0]);
-		return 1;
-	}
-	loadfile(argv[1]);
-	initterm();
-	for(;;) {
-		display();

-		char c;
-		if(read(STDIN_FILENO,&c,1)==-1) die();
-		key(c);
-	}
-}



=includes
-#include <unistd.h>
-#include <fcntl.h>
-#include <termios.h>
-#include <poll.h>
-#include <sys/mman.h>
-#include <sys/stat.h>
-#include <stdint.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <string.h>
-#include <sys/ioctl.h>
-#include <errno.h>

-#define __USE_GNU

-#include <regex.h>


=termios
-struct termios oldkey;
-struct winsize win;
-
-void initterm() {
-	struct termios newkey;
-	tcgetattr(STDIN_FILENO,&oldkey);
-	newkey.c_cflag = B9600 | CRTSCTS | CS8 | CLOCAL | CREAD;
-	newkey.c_iflag = IGNPAR;
-	newkey.c_oflag = 0;
-	newkey.c_lflag = 0;
-	newkey.c_cc[VMIN]=1;
-	newkey.c_cc[VTIME]=0;
-	tcflush(STDIN_FILENO, TCIFLUSH);
-	tcsetattr(STDIN_FILENO,TCSANOW,&newkey);
-	ioctl(1,TIOCGWINSZ,&win);
-}
-
-void resetterm() {
-	tcsetattr(STDIN_FILENO,TCSANOW,&oldkey);
-}

-void die(void) {
-	resetterm();
-	abort();
-}

=>input.c
>includes
>termios
-int main(int argc, char *argv[]) {
-	int q=0;
-	initterm();
-	for(;;) {
-		char c;
-		if(read(STDIN_FILENO,&c,1)==-1) die();
-		printf("char '%c' %02x\r\n",c,c);
-		if(c=='\x03') { q++; } else { q=0; }
-		if(q==3) die();
-	}
-}

